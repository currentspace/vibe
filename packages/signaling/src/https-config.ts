/**
 * HTTPS Configuration
 * 
 * Provides HTTPS server configuration using local certificates
 * generated by mkcert for secure WebRTC development
 */

import { readFileSync, existsSync } from 'fs'
import { join } from 'path'

export interface HttpsOptions {
  key: Buffer
  cert: Buffer
}

/**
 * Get HTTPS options if certificates exist
 * @returns {HttpsOptions | null} HTTPS configuration or null if certificates don't exist
 */
export function getHttpsOptions(): HttpsOptions | null {
  // Check if HTTPS is explicitly disabled
  if (process.env.USE_HTTPS === 'false') {
    console.log('üì° HTTPS disabled via USE_HTTPS=false. Running in HTTP mode.')
    return null
  }
  
  // Check if running in Docker (certs mounted at /certs)
  const certPath = existsSync('/certs') ? '/certs' : join(process.cwd(), '..', '..', 'certs')
  const keyFile = join(certPath, 'localhost-key.pem')
  const certFile = join(certPath, 'localhost.pem')

  // Check if certificates exist
  if (!existsSync(keyFile) || !existsSync(certFile)) {
    console.log('‚ö†Ô∏è  HTTPS certificates not found. Running in HTTP mode.')
    console.log('   To enable HTTPS, run: mkcert -install && mkcert -key-file certs/localhost-key.pem -cert-file certs/localhost.pem localhost 127.0.0.1 ::1')
    return null
  }

  try {
    const key = readFileSync(keyFile)
    const cert = readFileSync(certFile)
    
    console.log('üîê HTTPS certificates loaded successfully')
    return { key, cert }
  } catch (error) {
    console.error('‚ùå Error loading HTTPS certificates:', error)
    return null
  }
}

/**
 * Get the protocol based on HTTPS availability
 * @returns {string} 'https' if certificates are available, 'http' otherwise
 */
export function getProtocol(): string {
  // Check if HTTPS is explicitly disabled
  if (process.env.USE_HTTPS === 'false') {
    return 'http'
  }
  
  // Check if running in Docker (certs mounted at /certs)
  const certPath = existsSync('/certs') ? '/certs' : join(process.cwd(), '..', '..', 'certs')
  const keyFile = join(certPath, 'localhost-key.pem')
  const certFile = join(certPath, 'localhost.pem')
  
  return (existsSync(keyFile) && existsSync(certFile)) ? 'https' : 'http'
}