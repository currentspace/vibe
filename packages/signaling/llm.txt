# Signaling Server - WebRTC Signaling Service

## Overview
Express.js server that facilitates WebRTC peer connections by handling signaling between clients. This server manages rooms and relays connection information.

## Architecture
- **Framework**: Express.js with TypeScript
- **WebSocket**: Socket.io for real-time communication
- **Runtime**: Node.js with tsx for development
- **Port**: 4000 (configurable via PORT env)

## Core Functionality

### Room Management
```typescript
interface Room {
  id: string
  participants: Set<string>
  createdAt: Date
}
```
- Create rooms with unique IDs
- Track participants per room
- Automatic cleanup of empty rooms

### Socket Events

#### Client → Server
- `join-room`: Join a specific room
  ```typescript
  { roomId: string, userId: string }
  ```
- `leave-room`: Leave current room
  ```typescript
  { roomId: string }
  ```
- `offer`: Send WebRTC offer to peer
  ```typescript
  { roomId: string, targetId: string, offer: RTCSessionDescriptionInit }
  ```
- `answer`: Send WebRTC answer to peer
  ```typescript
  { roomId: string, targetId: string, answer: RTCSessionDescriptionInit }
  ```
- `ice-candidate`: Exchange ICE candidates
  ```typescript
  { roomId: string, targetId: string, candidate: RTCIceCandidateInit }
  ```

#### Server → Client
- `user-joined`: Notify when user joins room
- `user-left`: Notify when user leaves room
- `room-users`: Current participants list
- `offer`: Relay offer to target peer
- `answer`: Relay answer to target peer
- `ice-candidate`: Relay ICE candidate

### REST Endpoints
- `GET /health` - Health check
- `GET /api/rooms` - List all active rooms
- `GET /api/rooms/:roomId` - Get specific room details

## CORS Configuration
```typescript
cors({
  origin: process.env.CLIENT_URL || 'http://localhost:3000',
  credentials: true
})
```

## Error Handling
- Validates room existence before operations
- Handles disconnections gracefully
- Cleans up empty rooms automatically
- Logs errors for debugging

## Security Considerations
- Room IDs are UUIDs (hard to guess)
- No authentication (add for production)
- Rate limiting recommended for production
- Input validation on all socket events

## Scaling Considerations
- Currently single-instance
- For scale: Add Redis adapter for Socket.io
- Implement horizontal scaling with sticky sessions
- Add monitoring and metrics

## Development
```bash
pnpm dev  # Start with hot reload
pnpm build  # Build for production
pnpm start  # Run production build
```

## Environment Variables
- `PORT` - Server port (default: 4000)
- `CLIENT_URL` - Allowed CORS origin
- `NODE_ENV` - Environment (development/production)

## Common Issues
1. **CORS errors**: Check CLIENT_URL matches frontend
2. **Connection refused**: Ensure server is running
3. **Room not found**: Validate room exists before joining
4. **Memory leaks**: Ensure proper cleanup on disconnect

## Testing Approach
- Unit tests for room management logic
- Integration tests for socket events
- Load testing for concurrent connections
- Mock Socket.io in tests

## Future Enhancements
- Authentication/authorization
- Persistent room storage
- Recording capabilities
- TURN server integration
- Analytics and monitoring