# Vibe - WebRTC Video Chat Application

## Project Overview
Vibe is a modern real-time video chat application built with cutting-edge web technologies. It demonstrates WebRTC implementation with a clean, production-ready architecture.

## Tech Stack
- **Frontend**: Next.js 15.3 with React 19.1 and React Server Components
- **UI Framework**: Chakra UI v3 with Emotion for styling
- **Real-time Communication**: WebRTC with Socket.io signaling
- **Language**: TypeScript throughout
- **Package Manager**: pnpm with workspace support
- **Testing**: Vitest for unit tests
- **Development**: Turbopack for fast builds

## Architecture
- Monorepo structure using pnpm workspaces
- Apps:
  - `/apps/web` - Next.js frontend application
  - `/apps/signaling` - Node.js/Express WebRTC signaling server
- Shared packages for common code

## Key Features
- Real-time peer-to-peer video/audio communication
- Room-based chat system
- Modern, responsive UI with animations
- Server-side rendering with proper hydration
- Type-safe throughout with TypeScript

## Development Workflow
1. `pnpm install` - Install dependencies
2. `pnpm dev` - Start both web and signaling servers
3. `pnpm test` - Run tests
4. `pnpm build` - Build for production

## Important Patterns
- Use React Server Components by default
- Add 'use client' directive only when needed
- Follow established coding standards in docs/
- Maintain comprehensive test coverage
- Use conventional commits for version control

## Common Tasks
- Adding features: Follow the established component patterns
- Debugging: Check browser console and server logs
- Testing: Write tests alongside new features
- Styling: Use Chakra UI components and theme system

## WebRTC Implementation
- Signaling server handles room management and peer discovery
- ICE candidates exchanged via Socket.io
- STUN/TURN servers configured for NAT traversal
- Automatic reconnection and error handling

## Performance Considerations
- Components wrapped in ClientOnly for hydration-sensitive content
- Emotion SSR properly configured with registry
- Lazy loading for heavy components
- Optimized re-renders with proper React patterns