# Web Application - Vibe Frontend

## Overview
This is the Next.js frontend application for Vibe, implementing the user interface for WebRTC video chat functionality.

## Architecture
- **Framework**: Next.js 15.3 with App Router
- **UI Library**: Chakra UI v3 with Emotion
- **State Management**: React Context API for WebRTC state
- **Styling**: Emotion with SSR support
- **Real-time**: Socket.io client for signaling

## Directory Structure
```
src/
├── app/                    # Next.js App Router pages
│   ├── layout.tsx         # Root layout with providers
│   ├── page.tsx          # Home page
│   └── connect/          # WebRTC connection page
├── components/           # Reusable UI components
│   ├── Button.tsx       # Custom button wrapper
│   ├── ConnectionStatus.tsx  # WebRTC connection indicator
│   ├── RoomManager.tsx      # Room creation/joining UI
│   ├── ParticipantList.tsx # Active participants display
│   └── ClientOnly.tsx       # Hydration wrapper
├── contexts/            # React contexts
│   └── WebRTCContext.tsx   # WebRTC state management
├── lib/                # Utilities and helpers
│   └── emotion-registry.tsx # Emotion SSR configuration
└── test/              # Test configuration
```

## Key Components

### ConnectionStatus
- Shows real-time connection state
- Animated status indicators
- Error message display

### RoomManager
- Create new rooms
- Join existing rooms
- Leave room functionality
- Toast notifications for user feedback

### ParticipantList
- Display active participants
- Join time tracking
- Animated entry/exit
- Collapsible UI

### WebRTCContext
- Manages WebRTC peer connections
- Handles signaling via Socket.io
- Room state management
- Error handling and recovery

## Styling Approach
- Chakra UI v3 component system
- Global animation keyframes via Emotion
- Responsive design with Chakra's breakpoints
- Dark mode ready (not yet implemented)

## Common Patterns
```typescript
// Client Component
'use client'
import { useState } from 'react'

// Server Component (default)
// No directive needed

// Animations
import { Global } from '@emotion/react'
const animationStyles = `@keyframes ...`

// Chakra UI v3 Stack
<Stack gap={4} direction="row">
```

## Testing
- Vitest for unit tests
- React Testing Library for component tests
- Mock WebRTC APIs in tests
- Test files co-located with components

## Performance Optimizations
- ClientOnly wrapper prevents hydration mismatches
- Emotion registry for proper SSR
- React.memo for expensive components
- Lazy loading planned for video components

## Environment Variables
- `NEXT_PUBLIC_SIGNALING_URL` - WebSocket server URL (defaults to ws://localhost:4000)

## Common Issues & Solutions
1. **Hydration errors**: Wrap dynamic content in ClientOnly
2. **Chakra UI errors**: Ensure using v3 API (Stack not VStack, gap not spacing)
3. **WebRTC connection**: Check signaling server is running
4. **Build errors**: Run `pnpm typecheck` to find TypeScript issues

## Development Tips
- Use `pnpm dev` to start with hot reload
- Check browser console for WebRTC errors
- Use React DevTools to debug context state
- Chakra UI docs: https://www.chakra-ui.com/docs